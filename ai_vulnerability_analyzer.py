import os
import json
import logging
from openai import OpenAI

logger = logging.getLogger(__name__)

class AIVulnerabilityAnalyzer:
    """AI-powered vulnerability analysis using OpenAI"""
    
    def __init__(self):
        self.api_key = os.environ.get("OPENAI_API_KEY")
        if self.api_key:
            self.client = OpenAI(api_key=self.api_key)
        else:
            self.client = None
            logger.warning("OpenAI API key not provided, AI analysis will be disabled")
    
    def analyze_response_content(self, url, response_text, headers):
        """Analyze response content for vulnerabilities using AI"""
        if not self.client:
            return []
        
        try:
            prompt = f"""
            Analyze the following web response for security vulnerabilities and issues:
            
            URL: {url}
            Headers: {json.dumps(dict(headers), indent=2)}
            Response Content (first 2000 chars): {response_text[:2000]}
            
            Please identify potential security vulnerabilities and provide a JSON response with the following format:
            {{
                "vulnerabilities": [
                    {{
                        "alert": "Vulnerability Name",
                        "risk": "High|Medium|Low",
                        "confidence": "High|Medium|Low",
                        "description": "Detailed description of the vulnerability",
                        "solution": "Recommended solution",
                        "evidence": "Specific evidence found",
                        "cweid": "CWE ID if applicable",
                        "category": "vulnerability category"
                    }}
                ]
            }}
            
            Focus on:
            - Information disclosure in headers or content
            - Missing security headers
            - Potential XSS vectors
            - Authentication weaknesses
            - Configuration issues
            - Input validation problems
            """
            
            response = self.client.chat.completions.create(
                model="gpt-4o",  # the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
                messages=[
                    {
                        "role": "system",
                        "content": "You are a cybersecurity expert specializing in web application security analysis. Provide detailed, actionable vulnerability assessments."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                response_format={"type": "json_object"}
            )
            
            content = response.choices[0].message.content or "{}"
            result = json.loads(content)
            vulnerabilities = result.get("vulnerabilities", [])
            
            # Format vulnerabilities to match scanner format
            formatted_vulns = []
            for vuln in vulnerabilities:
                formatted_vulns.append({
                    'alert': vuln.get('alert', 'AI-Detected Vulnerability'),
                    'risk': vuln.get('risk', 'Medium'),
                    'confidence': vuln.get('confidence', 'Medium'),
                    'description': vuln.get('description', 'AI-detected security issue'),
                    'solution': vuln.get('solution', 'Review and implement security best practices'),
                    'url': url,
                    'param': '',
                    'evidence': vuln.get('evidence', 'Detected by AI analysis'),
                    'cweid': vuln.get('cweid', ''),
                    'wascid': ''
                })
            
            logger.info(f"AI analysis found {len(formatted_vulns)} potential vulnerabilities")
            return formatted_vulns
            
        except Exception as e:
            logger.error(f"AI analysis failed: {str(e)}")
            return []
    
    def analyze_ssl_configuration(self, hostname, ssl_info):
        """AI analysis of SSL/TLS configuration"""
        if not self.client:
            return []
        
        try:
            prompt = f"""
            Analyze this SSL/TLS configuration for security issues:
            
            Hostname: {hostname}
            SSL Information: {json.dumps(ssl_info, indent=2)}
            
            Provide a JSON response identifying any SSL/TLS security concerns:
            {{
                "ssl_issues": [
                    {{
                        "alert": "SSL Issue Name",
                        "risk": "High|Medium|Low",
                        "description": "Description of the SSL issue",
                        "solution": "Recommended fix",
                        "evidence": "Specific evidence"
                    }}
                ]
            }}
            """
            
            response = self.client.chat.completions.create(
                model="gpt-4o",  # the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
                messages=[
                    {
                        "role": "system",
                        "content": "You are an SSL/TLS security expert. Analyze configurations for vulnerabilities."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                response_format={"type": "json_object"}
            )
            
            content = response.choices[0].message.content or "{}"
            result = json.loads(content)
            ssl_issues = result.get("ssl_issues", [])
            
            # Format SSL issues
            formatted_issues = []
            for issue in ssl_issues:
                formatted_issues.append({
                    'alert': f"SSL/TLS: {issue.get('alert', 'Configuration Issue')}",
                    'risk': issue.get('risk', 'Medium'),
                    'confidence': 'High',
                    'description': issue.get('description', 'SSL/TLS security concern'),
                    'solution': issue.get('solution', 'Review SSL/TLS configuration'),
                    'url': f'https://{hostname}',
                    'param': '',
                    'evidence': issue.get('evidence', 'AI SSL analysis'),
                    'cweid': '295',
                    'wascid': '4'
                })
            
            return formatted_issues
            
        except Exception as e:
            logger.error(f"AI SSL analysis failed: {str(e)}")
            return []
    
    def get_vulnerability_insights(self, all_vulnerabilities):
        """Get AI insights about the overall security posture"""
        if not self.client or not all_vulnerabilities:
            return None
        
        try:
            vuln_summary = []
            for vuln in all_vulnerabilities:
                vuln_summary.append({
                    'alert': vuln['alert'],
                    'risk': vuln['risk'],
                    'description': vuln['description'][:200]
                })
            
            prompt = f"""
            Based on these security vulnerabilities found during a web application scan:
            
            {json.dumps(vuln_summary, indent=2)}
            
            Provide a security assessment summary in JSON format:
            {{
                "overall_risk": "Critical|High|Medium|Low",
                "priority_actions": ["action1", "action2", "action3"],
                "security_score": "score out of 100",
                "recommendations": "Overall security recommendations"
            }}
            """
            
            response = self.client.chat.completions.create(
                model="gpt-4o",  # the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
                messages=[
                    {
                        "role": "system",
                        "content": "You are a cybersecurity consultant providing executive-level security assessments."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                response_format={"type": "json_object"}
            )
            
            content = response.choices[0].message.content or "{}"
            return json.loads(content)
            
        except Exception as e:
            logger.error(f"AI insights generation failed: {str(e)}")
            return None